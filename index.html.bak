<!doctype html>
<html>
  <head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>Chess engine offline</title>
	<link rel="icon" type="image/x-icon" href="public/img/favicon.ico">
    <link rel="stylesheet" href="public/css/bootstrap-3.3.7.min.css">
    <link rel="stylesheet" href="public/css/chessboard-1.0.0.min.css" />
	<style>
		#display {
		margin-left: 25px;
		margin-top: 15px;
		}

		.form-horizontal { margin-top: 50px; }

		.control {
			margin: 5px 0 5px 0;
			padding: 10px;
		}

		#file {
			margin-top: 5px;
			padding: 8px;
			width: 250px;
			height: 42px;
			font-weight: bold;
			font-style: italic;
		}

		#pgn {
			width: 550px;
			font-size: 16px;
			margin-left: 25px;
		}

		.highlight-blue { box-shadow: inset 0 0 3px 3px blue; }

		.highlight-red { box-shadow: inset 0 0 3px 3px red; }
	</style>
    <script src="public/lib/jquery-3.5.1.min.js"></script>
    <script src="public/lib/bootstrap-3.3.7.min.js"></script>
    <script src="public/lib/chessboard-1.0.0.min.js"></script>
	<script src="public/lib/chess-0.11.0.js"></script>
  </head>
  <body>
    <div class="row">
      <div id="display" class="col-sm-5 col-md-5">
        <span class="h3" id="time1"></span>
        <div id="board" style="width: 500px"></div>
        <span class="h3" id="time2"></span>
        <br><br>
        <div id="engineStatus">...</div>
      </div>
      <div class="col-sm-5 col-md-6">
        <form class="form-horizontal">
          <div class="form-group">
            <label for="timeBase" class="control-label col-xs-4 col-sm-6 col-md-4">Time (min)</label>
            <div class="col-xs-4 col-sm-6 col-md-2">
              <input type="number" class="form-control" id="timeBase" value="60">
            </div>
          </div>
          <div class="form-group">
            <label for="skillLevel" class="control-label col-xs-4 col-sm-6 col-md-4">Skill level (0-20)</label>
            <div class="col-xs-4 col-sm-6 col-md-2">
              <input type="number" class="form-control" id="skillLevel" value="10">
            </div>
          </div>
          <div class="form-group">
            <label for="color" class="control-label col-xs-4 col-sm-6 col-md-4">I play</label>
            <div class="col-xs-4 col-sm-6 col-md-4">
              <div class="btn-group" data-toggle="buttons">
                <label class="btn btn-primary active" id="color-white"><input type="radio" name="color">White</label>
                <label class="btn btn-primary" id="color-black"><input type="radio" name="color">Black</label>
              </div>
            </div>
          </div>
          <div class="form-group">
            <label for="color" class="control-label col-xs-4 col-sm-6 col-md-4"></label>
            <div class="col-xs-4 col-sm-6 col-md-7">
			  <button type="button" class="btn btn-primary control" onclick="newGame()">New Game</button>
			  <br>
			  <button type="button" class="btn btn-primary control" onclick="saveGame()">Save Game</button>
			  <br>
			  <button id="adnan" type="button" class="btn btn-primary control" style="float: left" onclick="loadGame()" disabled>Load Game</button>
			  <input type="file" class="form-control" id="file">
			  <br>
			  <button type="button" class="btn btn-primary" onclick="undo()">Undo (z)</button>
			  <button type="button" class="btn btn-primary" onclick="redo()">Redo (y)</button>
            </div>
			<label for="color" class="control-label col-xs-4 col-sm-6 col-md-4" style="margin-top: 10px">Promote to</label>
            <div class="col-xs-4 col-sm-6 col-md-7" style="margin-top: 10px">
              <select id="promote" style="padding: 5px">
                <option value=q selected>Queen</option>
                <option value=r>Rook</option>
                <option value=b>Bishop</option>
                <option value=n>Knight</option>
              </select>
            </div>
		  </div>
        </form>
		<h3>Moves:</h3>
        <div id="pgn"></div>
      </div>
	 </div>
    <script>
		// enginegame.js
		function engineGame() {
			var game = new Chess();
			var piece_theme = 'public/img/chesspieces/wikipedia/{piece}.png';
			var board;
			var flag = true; // for squareToHighlight
			var over; // for time out
			var adnan=[]; // for redo()
			var $board = $('#board');
			var engine = STOCKFISH();
			var engineStatus = {};
			var time = { wtime: 3600000, btime: 3600000};
			var playerColor;
			var bK = 'e8';
			var wK = 'e1';
			var clockTimeoutID = null;
			var isEngineRunning = false;
			var announced_game_over;
			var squareToHighlight = null;
			var squareClass = 'square-55d63';
			var whiteSquareGrey = '#a9a9a9';
			var blackSquareGrey = '#696969';
			
			function removeGreySquares () {
				$('#board .square-55d63').css('background', '');
			}
			
			function greySquare (square) {
				var $square = $('#board .square-' + square);
				var background = whiteSquareGrey;
				if ($square.hasClass('black-3c85d')) {
					background = blackSquareGrey;
				}
				$square.css('background', background);
			}
			
			function onMouseoverSquare (square, piece) {
				// get list of possible moves for this square
				var moves = game.moves({
					square: square,
					verbose: true
				});

				// exit if there are no moves available for this square
				if (moves.length === 0) return

				// highlight the square they moused over
				greySquare(square);

				// highlight the possible squares for this piece
				for (var i = 0; i < moves.length; i++) {
					greySquare(moves[i].to);
				}
			}

			function onMouseoutSquare (square, piece) {
				removeGreySquares();
			}
			
			setInterval(function ()
			{
				if (announced_game_over) {
					return;
				}
				if(over) {
					announced_game_over = true;
					var result = "Game Over, Time out, ";
					if(game.turn() == 'b')
							result += 'White';
						else
							result += 'Black';
						result += " won";
						alert(result);
				}
				if (game.game_over()) {
					announced_game_over = true;
					if(game.in_stalemate())
						alert("Game Over, Stalemate, Drawn");
					else if(game.in_stalemate())
						alert("Game Over, Threefold repetition, Drawn");
					else if(game.in_stalemate())
						alert("Game Over, Insufficient material, Drawn");
					else if(game.in_stalemate()) // fifty move rule
						alert("Game Over, Fifty move rule, Drawn");
					else {
						var result = "Game Over, ";
						if(game.turn() == 'b')
							result += 'White';
						else
							result += 'Black';
						result += " won";
						alert(result);
					}
				}
			}, 1000);

			function uciCmd(cmd) {
				console.log("UCI: " + cmd);
				engine.postMessage(cmd);
			}
			uciCmd('uci');

			function displayStatus() {
				var engine = 'Stockfish';
				var status = 'Engine ('+ engine +'): ';
				if(!engineStatus.engineLoaded) {
					status += 'loading...';
				} else if(!engineStatus.engineReady) {
					status += 'loaded...';
				} else {
					status += 'ready.';
				}
				if(engineStatus.search) {
					status += '<br>' + engineStatus.search;
				}
				$('#engineStatus').html(status);
			}

			function get_moves()
			{
				var moves = '';
				var history = game.history({verbose: true});
				
				for(var i = 0; i < history.length; ++i) {
					var move = history[i];
					moves += ' ' + move.from + move.to + (move.promotion ? move.promotion : '');
				}
				
				return moves;
			}
			
			function displayClock(color, t) {
				if(time.startTime > 0 && color == time.clockColor) {
					t = Math.max(0, t + time.startTime - Date.now());
				}
				var id = color == playerColor ? '#time2' : '#time1';
				var sec = Math.ceil(t / 1000);
				var min = Math.floor(sec / 60);
				sec -= min * 60;
				var hours = Math.floor(min / 60);
				min -= hours * 60;
				var display = hours + ':' + ('0' + min).slice(-2) + ':' + ('0' + sec).slice(-2);
				$(id).text(display);
				if(t == 0) {
					over = true;
					stopClock();
				}
			}

			function updateClock() {
				displayClock('white', time.wtime);
				displayClock('black', time.btime);
			}

			function clockTick() {
				updateClock();
				var t = (time.clockColor == 'white' ? time.wtime : time.btime) + time.startTime - Date.now();
				var timeToNextSecond = (t % 1000) + 1;
				clockTimeoutID = setTimeout(clockTick, timeToNextSecond);
			}

			function stopClock() {
				if(clockTimeoutID !== null) {
					clearTimeout(clockTimeoutID);
					clockTimeoutID = null;
				}
				if(time.startTime > 0) {
					var elapsed = Date.now() - time.startTime;
					time.startTime = null;
					if(time.clockColor == 'white') {
						time.wtime = Math.max(0, time.wtime - elapsed);
					} else {
						time.btime = Math.max(0, time.btime - elapsed);
					}
				}
			}

			function startClock() {
				if(game.turn() == 'w') {
					time.clockColor = 'white';
				} else {
					time.clockColor = 'black';
				}
				time.startTime = Date.now();
				clockTick();
			}
			
			function prepareMove() {
				stopClock();
				$('#pgn').text(game.pgn());
				board.position(game.fen());
				updateClock();
				var turn = game.turn() == 'w' ? 'white' : 'black';
				if(!game.game_over() && !over) {
					if(turn != playerColor) {
						uciCmd('position startpos moves' + get_moves());
						uciCmd("go " + (time.depth ? "depth " + time.depth : ""));
						isEngineRunning = true;
					}
					startClock();
				}
			}
			
			engine.onmessage = function(event) {
				var line;
				if (event && typeof event === "object") {
					line = event.data;
				} else {
					line = event;
				}
				console.log("Reply: " + line)
				if(line == 'uciok') {
					engineStatus.engineLoaded = true;
				}
				else if(line == 'readyok') {
					engineStatus.engineReady = true;
				}
				else {
					var match = line.match(/^bestmove ([a-h][1-8])([a-h][1-8])([qrbn])?/);
					if(match) {
						isEngineRunning = false;
						game.move({from: match[1], to: match[2], promotion: match[3]});
						
						// highlight move
						$board.find('.' + squareClass).removeClass('highlight-blue');
						$board.find('.square-' + match[1]).addClass('highlight-blue');
						squareToHighlight = match[2];
						
						if(game.get(match[2]).type == 'k')
							if(game.get(match[2]).color == 'b')
								bK = match[2];
							else
								wK = match[2];
						$board.find('.' + squareClass).removeClass('highlight-red');
						if(game.in_check()){
							if(playerColor == 'white')
								$board.find('.square-' + wK).addClass('highlight-red');
							else
								$board.find('.square-' + bK).addClass('highlight-red');
						}
						
						prepareMove();
						
					/// Is it sending feedback?
					}
					else if(match = line.match(/^info .*\bdepth (\d+) .*\bnps (\d+)/)) {
						engineStatus.search = 'Depth: ' + match[1] + ', Nps: ' + match[2];
					}
				}
				displayStatus();
			};

			var onDragStart = function(source, piece, position, orientation) {
				var re = playerColor == 'white' ? /^b/ : /^w/
					if (game.game_over() || over ||
						piece.search(re) !== -1) {
						return false;
					}
			};

			var onDrop = function(source, target) {
				flag = true;
				removeGreySquares();
				
				// see if the move is legal
				var move = game.move({
					from: source,
					to: target,
					promotion: document.getElementById("promote").value
				});

				// illegal move
				if (move === null) return 'snapback';
				
				adnan = []; // for stop redo()
				
				if(game.get(move.to).type == 'k')
					if(game.get(move.to).color == 'b')
						bK = move.to;
					else
						wK = move.to;
				$board.find('.' + squareClass).removeClass('highlight-red');
				
				prepareMove();
				
				if(game.in_check())
					if(playerColor == 'white')
						$board.find('.square-' + bK).addClass('highlight-red');
					else
						$board.find('.square-' + wK).addClass('highlight-red');
			};
			
			
			function onMoveEnd () {
				if(flag)
					$board.find('.square-' + squareToHighlight).addClass('highlight-blue');
			}

			var onSnapEnd = function() {
				board.position(game.fen());
			};

			var cfg = {
				draggable: true,
				pieceTheme: piece_theme,
				position: 'start',
				onDragStart: onDragStart,
				onDrop: onDrop,
				onMoveEnd: onMoveEnd,
				snapbackSpeed: 250,
				onMouseoutSquare: onMouseoutSquare,
				onMouseoverSquare: onMouseoverSquare,
				onSnapEnd: onSnapEnd
			};

			board = new ChessBoard('board', cfg);

			return {
				reset: function() {
					game.reset();
					adnan = []; // for stop redo()
					over = false;
				},
				loadPgn: function(pgn) {
					game.load_pgn(pgn);
					adnan = []; // for stop redo()
					over = false;
					$board.find('.' + squareClass).removeClass('highlight-red');
					$board.find('.' + squareClass).removeClass('highlight-blue');
					prepareMove();
				},
				setPlayerColor: function(color) {
					playerColor = color;
					board.orientation(playerColor);
				},
				setSkillLevel: function(skill) {
					var max_err, err_prob;
					if (skill < 0) {
						skill = 0;
					}
					if (skill > 20) {
						skill = 20;
					}
					
					time.level = skill;
					
					/// Change thinking depth allowance.
					if (skill < 5) {
						time.depth = "1";
					} else if (skill < 10) {
						time.depth = "2";
					} else if (skill < 15) {
						time.depth = "3";
					} else {
						/// Let the engine decide.
						time.depth = "";
					}
					
					uciCmd('setoption name Skill Level value ' + skill);
					
					///NOTE: Stockfish level 20 does not make errors (intentially), so these numbers have no effect on level 20.
					/// Level 0 starts at 1
					err_prob = Math.round((skill * 6.35) + 1);
					/// Level 0 starts at 10
					max_err = Math.round((skill * -0.5) + 10);
					
					uciCmd('setoption name Skill Level Maximum Error value ' + max_err);
					uciCmd('setoption name Skill Level Probability value ' + err_prob);
				},
				setTime: function(baseTime) {
					if(baseTime > 0)
						time = { wtime: baseTime * 1000, btime: baseTime * 1000};
				},
				setDepth: function(depth) {
					time = { depth: depth };
				},
				setNodes: function(nodes) {
					time = { nodes: nodes };
				},
				setContempt: function(contempt) {
					uciCmd('setoption name Contempt value ' + contempt);
				},
				setAggressiveness: function(value) {
					uciCmd('setoption name Aggressiveness value ' + value);
				},
				getPgn: function() {
					return game.pgn();
				},
				start: function() {
					uciCmd('ucinewgame');
					uciCmd('isready');
					engineStatus.engineReady = false;
					engineStatus.search = null;
					displayStatus();
					prepareMove();
					announced_game_over = false;
				},
				redo: function() {
					if(isEngineRunning)
						return false;
					var mv1, mv2;
					mv1 = adnan.pop();
					mv2 = adnan.pop();
					game.move(mv2);
					game.move(mv1);
					prepareMove();
				},
				undo: function() {
					if(isEngineRunning)
						return false;
					var array = game.history();
					if(array.length == 0 && playerColor == 'white')
						return;
					if(array.length == 1 && playerColor == 'black')
						return;
					adnan.push(array[array.length-2]);
					adnan.push(array[array.length-1]);
					game.undo();
					game.undo();
					engineStatus.search = null;
					displayStatus();
					flag = false;
					$board.find('.' + squareClass).removeClass('highlight-red');
					$board.find('.' + squareClass).removeClass('highlight-blue');
					prepareMove();
				}
			};
		}
	</script>
	<script>
		// main.js
		var game;
		var newGame = function (){};
		var pgn;

		(function () {
			var script_tag  = document.createElement("script");
			script_tag.type ="text/javascript";
			script_tag.src  = "public/lib/engines/stockfish.asm.js";
			script_tag.onload = init;
			document.getElementsByTagName("head")[0].appendChild(script_tag);
		}());

		function init()
		{
			game = engineGame();
			newGame = function newGame() {
				var baseTime = parseFloat($('#timeBase').val()) * 60;
				var skill = parseInt($('#skillLevel').val(), 10);
				game.reset();
				game.setTime(baseTime);
				game.setSkillLevel(skill);
				game.setPlayerColor($('#color-white').hasClass('active') ? 'white' : 'black');
				game.start();
			}
			
			document.getElementById("skillLevel").addEventListener("change", function () {
				game.setSkillLevel(parseInt(this.value, 10));
			});
			
			document.getElementById('adnan').disabled = true;
			document.getElementById('file').value="";
			
			document.getElementById('file').addEventListener('change', function selectedFileChanged() {
				if (this.files.length === 0) {
					return;
				}
				document.getElementById('adnan').disabled = false;
				var reader = new FileReader();
				reader.onload = function fileReadCompleted() {
				// when the reader is done, the content is in reader.result.
				pgn = reader.result;
				};
				reader.readAsText(this.files[0]);
			});
			
			newGame();
		}
		
		document.onkeypress = KeyPress;
		function KeyPress(e) {
			var evtobj = window.event? event : e
			if (evtobj.keyCode == 122) undo();
			else if (evtobj.keyCode == 121) redo();
		}

		function undo() {
			game.undo();
		}

		function redo() {
			game.redo();
		}

		function loadGame() {
			game.loadPgn(pgn);
		}

		function saveData(data, fileName) {
			var a = document.createElement("a");
			document.body.appendChild(a);
			a.style = "display: none";
			var json = JSON.stringify(data),
				blob = new Blob([data], {type: "text/plain;charset=utf-8"}),
				url = window.URL.createObjectURL(blob);
			a.href = url;
			a.download = fileName;
			a.click();
			window.URL.revokeObjectURL(url);
		}

		function saveGame() {
			var pgn = game.getPgn();
			saveData(pgn, "pgn.txt");
		}
	</script>
  </body>
</html>